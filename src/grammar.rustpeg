use super::Rounding;

number -> i32
	= n:$([0-9]+) { n.parse().unwrap() }

decimal -> f32
    = n:$([0-9.]+) { n.parse().unwrap() }

signed_decimal -> f32
    = n:$(("+" / "-")? [0-9.]+) { n.parse().unwrap() }

units -> i32
    = u:$("D"i / "H"i / "M"i / "S"i) {
        match u.to_uppercase().as_ref() {
            "D" => 86400,
            "H" => 3600,
            "M" => 60,
            "S" => 1,
            _ => 0
        }
    }

pub rounding -> Rounding
    = d:$("+" / "U"i / "-" / "D"i / "=" / "H"i / "E"i)? i:decimal j:units? {
        let seconds = i * j.unwrap_or(60) as f32;
        match d.to_uppercase().as_ref() {
            "+" | "U" => Rounding::Up(seconds),
            "-" | "D" => Rounding::Down(seconds),
            "=" | "H" => Rounding::Half(seconds),
            _ => Rounding::Up(seconds),
        }
    } 


//date & time offsets

offset_units -> f32
    = n:decimal m:units { n * m as f32 }

offset_hh -> i32
    = n:$([0-9]*<1,2>) { n.parse().unwrap() }

offset_mm -> i32
    = n:$([0-9]*<2>) { n.parse().unwrap() }

offset_hhmm -> f32
    = h:offset_hh ":" m:offset_mm { ((h * 3600) + (m * 60)) as f32 }

pub offset -> f32
    = s:$("+" / "-" / "_") n:(offset_units / offset_hhmm) {
        match s {
            "+" => n,
            "-" | "_" => -n,
            _ => 0.0,
        }
    }


// time formats

hour -> u32
    = n:$([0-9]*<1,2>) { n.parse().unwrap() }

minute -> u32
    = n:$([0-9]*<2>) { n.parse().unwrap() }

second -> f32
    = n:$([0-9.]*<1,12>) { n.parse().unwrap() }

meridiem -> u32
    = a:$("AM"i / "PM"i) {
        match a.to_uppercase().as_ref() {
            "AM" => 0,
            "PM" => 12,
            _ => 0
        }
    }

pub time -> (u32, u32, f32)
    = h:hour ":" m:minute ":"? s:second? " "? mer:meridiem? {
        let h = h + mer.unwrap_or(0);
        let s = s.unwrap_or(0.0);
        (h,m,s)
    }

// time zone offsets

tz_offset_hhmm -> i32
    = s:$("+" / "-") h:hour ":" m:minute {
        let ofst = (h * 3600) + (m * 60);
        match s {
            "+" => ofst as i32,
            "-" => -(ofst as i32),
            _ => <i32>::min_value(),
        }
    }

tz_offset_z -> i32
    = "Z"i { 0 }

tz_offset -> i32
    = tz_offset_hhmm / tz_offset_z


// date formats

ds = "-" / "/"

year -> i32
    = n:$([0-9]*<4>) { n.parse().unwrap() }

month -> u32
     = n:$([0-9]*<1,2>) { n.parse().unwrap() }

day -> u32
     = n:$([0-9]*<1,2>) { n.parse().unwrap() }

partial_date -> (Option<i32>, Option<u32>, Option<u32>)
    = y:year? ds? m:month? ds? d:day { (y,m,Some(d)) }

dts = "T"i / " "

datetime_both -> (Option<i32>, Option<u32>, Option<u32>, u32, u32, f32, Option<i32>)
    = d:partial_date dts t:time tz:tz_offset? {
        let (year, month, day) = d;
        let (hour, minute, second) = t;
        (year, month, day, hour, minute, second, tz)
    }

datetime_date -> (Option<i32>, Option<u32>, Option<u32>, u32, u32, f32, Option<i32>)
    = d:partial_date tz:tz_offset? {
        let (year, month, day) = d;
        let (hour, minute, second) = (0,0,0.0);
        (year, month, day, hour, minute, second, tz)
    }

datetime_time -> (Option<i32>, Option<u32>, Option<u32>, u32, u32, f32, Option<i32>)
    = t:time tz:tz_offset? {
        let (year, month, day) = (None, None, None);
        let (hour, minute, second) = t;
        (year, month, day, hour, minute, second, tz)
    }

pub datetime -> (Option<i32>, Option<u32>, Option<u32>, u32, u32, f32, Option<i32>)
    = datetime_both / datetime_date / datetime_time
